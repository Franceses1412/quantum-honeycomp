#!/usr/bin/python3
from __future__ import print_function
import sys
import os
import platform

  
# Add path of the interface
qhroot = os.environ["QHROOT"] # root path
sys.path.append(qhroot+"/interface-pyqt/system_selection") 
# Add path of the wrapper
sys.path.append(qhroot+"/pysrc/") # python libraries

from interfacetk import qtwrap # import the library with simple wrappers to pyqt
window = qtwrap.main() # this is the main interface




def get_anaconda_command(name="python"):
  """Return the path for Anaconda Python, which has pyqt by default"""
  os.system("rm -f /tmp/qh_commands.txt") # remove
  os.system("which -a "+name+"  > /tmp/qh_commands.txt") # run the command
  lines = open("/tmp/qh_commands.txt").read() # read the lines
  lines = lines.split("\n") # split the lines
  del lines[-1] # remove the last one
  print("Found ",len(lines),"python paths\n")
  for l in lines: print(l)
  for l in lines: # loop over pythons
    l = l.split(" ")[-1] # get last line 
    if "anaconda" in l:
#      print("\nFound Anaconda ",name,"in",l)
      print("Python interpreter ",l)
      return l
  print("Anaconda",name,"not found")
  raise # not found
#  result = subprocess.check_output(["which -a python"])




# get anaconda command
try:
  python = get_anaconda_command("python3") # Anaconda command
except:
  python = "python" # hope for the best



def call_mode(mode,folder=None,pyqt=False):
  """ Returns a function which calls a particular quantum honeycomp mode"""
  if folder is None: folder = mode # if not provided
  path = os.environ["QHROOT"]+"/" # QH root path
  def launch(self):
    """Function to launch a particular calculation, passes qhroot as input"""
    if pyqt:
      os.system(python+" "+path+"interface-pyqt/"+mode+"/"+mode+".py   "+path +"  &")
    else:
      if platform.system()=="Linux": # for Linux
        os.system(python+" "+path+"systems/"+mode+"/"+mode+".py   "+path +"  &")
      else:
        print("Not available in",platform.system())
  return launch



# create signals
signals = dict()
#signals["islands"] = call_mode("0d")   
#signals["ribbons"] = call_mode("1d")   
signals["sheets"] = call_mode("2d",pyqt=True)   
signals["heterostructure"] = call_mode("hybridfilm",pyqt=True)   
signals["twisted_bilayer"] = call_mode("tbg",pyqt=True)  
#signals["moire"] = call_mode("moire")  
#signals["huge_islands"] = call_mode("huge_0d")  
#signals["multilayers"] = call_mode("multilayers2d")  
#signals["skyrmion"] = call_mode("skyrmion2d")  
#signals["vacancy2d"] = call_mode("vacancy2d")  
signals["ribbons_pyqt"] = call_mode("1d",pyqt=True)  
signals["islands_pyqt"] = call_mode("0d",pyqt=True)  
signals["film2d_pyqt"] = call_mode("2dslab",pyqt=True)  
signals["hybridribbon_pyqt"] = call_mode("hybridribbon",pyqt=True)  
signals["hofstader_pyqt"] = call_mode("hofstader1d",pyqt=True)  
signals["crystal3d_pyqt"] = call_mode("3d",pyqt=True)  
signals["huge0d_pyqt"] = call_mode("huge_0d",pyqt=True)  
signals["multilayergraphene"] = call_mode("multilayergraphene",pyqt=True)  



def update_qh():
  qhpath = os.environ["QHROOT"]
  os.chdir(qhpath) # go to the QH folder
  os.system("cp download_latest.py ../") # copy script
  os.chdir("..") # one folder less
  os.system("python download_latest.py") # execute script


signals["update_qh"] = update_qh # update Quantum Honeycomp 


# set the quantum honeycomp logo
qtwrap.set_logo("qhlogo","quantum_honeycomp.png")

# Set the version number
version = open(os.environ["QHROOT"]+"/VERSION.TXT").read().replace("\n","")
version = "Version "+version.replace(" ",".")
qtwrap.modify("qh_version",version) # set the version number

window.connect_clicks(signals) # connect the clicks
window.run()


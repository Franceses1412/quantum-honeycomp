#!/usr/bin/python

# this script read mean_field.in and calculates the magnetism in the
# different sites
# it assumes that each position has spin up and down (2*i,2*i+1)



mag_factor = 2.0

import numpy as np
import sys
import os.path

class crystal:
  dimensionality = 0
  a1 = np.array([0.,0.,0.])
  a2 = np.array([0.,0.,0.])
  a3 = np.array([0.,0.,0.])
  



def read_dout():
  m = np.genfromtxt('DENSITIES.OUT').transpose() # read file
  mag = np.array([m[2],m[3],m[4]]) # index and magnetizations
  return (m[0],mag) # index and magnetizations

def get_mag():
  """ Get the magnetization """
  m = np.genfromtxt("MAGNETIZATION.OUT").transpose()
  print("Mamiximum Mz = ",np.max(np.abs(m[3])))
  print("Mx = ",np.sum(m[1]))
  print("My = ",np.sum(m[2]))
  print("Mz = ",np.sum(m[3]))
  print("Abs(Mx) = ",np.sum(np.abs(m[1])))
  print("Abs(My) = ",np.sum(np.abs(m[2])))
  print("Abs(Mz) = ",np.sum(np.abs(m[3])))
  return (m[0],np.array([m[1],m[2],m[3]]))



def read_color():
  """Read the color of the atoms"""
  cc = open("ATOM_COLOR.OUT").readlines()
  cc = [c.split()[0] for c in cc]
  return cc


def read_positions():
  """Reads the positions of the system"""
  return np.genfromtxt("POSITIONS.OUT")


def get_lattice(crys):
  """Get the lattice vectors"""
  f = "LATTICE.OUT"
  if os.path.isfile(f):
    if  len(open(f,"r").readlines()) == 1:  # one dimensional
      crys.dimensionality = 1
      a1 = np.genfromtxt("LATTICE.OUT")
      try:
        a1[0]==1
      except:
        a1 = np.array([a1,0.,0.])
      crys.a1 = a1  # store in class
      return a1
    elif len(open(f,"r").readlines()) == 2:  # one dimensional
      crys.dimensionality = 2
      a1 = np.genfromtxt("LATTICE.OUT")[0]
      a2 = np.genfromtxt("LATTICE.OUT")[1]
      
      crys.a1, crys.a2 = a1, a2
    else:
      raise
  else:
    crys.dimensionality = 0
    

def get_bonds(which_matrix):
  """ Get the bonds between different atoms """
  lines = open('hamiltonian.in','r').readlines() # read the file
  bonds = [] # list with pairs of bonded atoms
  found = False
  n = get_hamiltonian_factor() # get number of orbitals per site
  for l in lines:    
    if found: # store element
      ll = l.split()
      if len(ll)<1: # exit loop if blank line found
        break
      i1 = int(ll[0])
      i2 = int(ll[1])
      if (i1%n==0) and (i2%n==0): # retin only the odd ones
        #bonds += [(i1,i2)] # this is for spin unpolarized!!!!
        bonds += [(i1/n-1,i2/n-1)] # this is for spin unpolarized!!!!
    if which_matrix in l: # find onsite matrix
      found = True
  bonds = np.array(bonds) # transform to int array
  return bonds


def get_hamiltonian_factor():
  """ Get the factor between number of atoms and number of orbitals"""
  ll = open("hamiltonian.in").readlines() 
  for i in range(len(ll)):
    if "DIMENSION_OF_THE_HAMILTONIAN" in ll[i]:
      norb = int(float(ll[i+1])) # number of orbitals
  r = np.genfromtxt("POSITIONS.OUT")
  nr = len(r)
  c = norb/nr
  print("There are",c,"orbitals per site")
  return c






get_magnetization = get_mag # use a particular function
get_positions = read_positions # use a particular function



xyz = get_positions().transpose()




def scale_mag(mag,threshold=0.001):
  """ Scales the magnetism if bigger than a certain threhold"""
  mmag = mag.transpose()
  mm = np.array([im.dot(im) for im in mmag]) # norms square
  mm = np.sqrt(mm) # vector with norms
  if max(mm)<threshold:  # if small do nothing
    return mag
  else:
    return mag/max(mm)



##########################
# Visual python routines #
##########################


try:
  import visual as v
except:
  print("Mayavi not present in python3, trying python2")
  try:
    import os
    qhpath = os.environ["QHROOT"]+"/" # path to quantum honeycomp
    os.system("/usr/bin/python2.7 "+qhpath+"utilities/tb90-magnetism")
  except:
    print("Something wrong")
    exit()
  exit()




atom_color=False
if "-color" in sys.argv: # if draw color
#if True:
  colors =  read_color() # reads the colors
  atom_color = True
  print("Using colors from ATOM_COLOR.OUT")



def create_lattice(xyz,dr=[0.,0.,0.],bold=False):
  """ Creates a lattice using xyz coordinates"""
  spheres = []
  ii = 0
  dr = np.array(dr)
  for ii in range(len(xyz[0])): # loop over atoms
    pos = (xyz[0][ii],xyz[1][ii],xyz[2][ii]) + dr  # position
    sphere = v.sphere(pos=pos) # create sphere
    if bold:
      sphere.color = v.color.green  # color of the atom
    else:
      sphere.color = v.color.yellow  # color of the atom
#    if atom_color: # if color provided
#      print colors[ii]
#      if colors[ii]=="red":
#        sphere.color = v.color.red  # color of the arrow
#      if colors[ii]=="blue":
#        sphere.color = v.color.blue  # color of the arrow
    spheres += [sphere] # store spheres
    sphere.radius = 0.3
    ii += 1
  return spheres




def plot_magnetization_arrow(xyz,mag):
  """ PLots the magnetization with arrows"""
  global mag_factor
  mag = scale_mag(mag)*mag_factor
  arrows = []
  ii = 0
  for ii in range(len(xyz[0])): # loop over atoms
    pos = (xyz[0][ii],xyz[1][ii],xyz[2][ii])  # position
    axis = (mag[0][ii],mag[1][ii],mag[2][ii])  # position
    arrow = v.arrow(pos=pos,axis=axis) # create arrow
    arrow.color = v.color.red  # color of the arrow
    arrows += [arrow] # store arrow
    ii += 1
  return arrows


def create_bonds(xyz,bonds,dr1=[0.,0.,0.],dr2=[0.,0.,0.]):
  """ Creates the bonds of the crystal """
  dr1 = np.array(dr1)  # first diplacement
  dr2 = np.array(dr2)  # second displacenement
  cylinders = []
  for (ii,jj) in bonds: # loop over the bonds
    r1 = np.array([xyz[0][ii],xyz[1][ii],xyz[2][ii]]) + dr1  # position
    r2 = np.array([xyz[0][jj],xyz[1][jj],xyz[2][jj]]) + dr2  # position
    axis = r2-r1  # position
    crad = 0.1 # radius of the cylinder
    cylinder = v.cylinder(pos=r1,axis=axis,radius=crad) # create arrow
    cylinder.color = v.color.yellow  # color of the arrow    
    cylinders += [cylinder]


def plot_magnetization_cylinders(xyz,mag,dr=[0.,0.,0.]):
  """ PLots the magnetization with arrows"""
  global mag_factor
  dr = np.array(dr)
  mag = scale_mag(mag)*mag_factor
  cylinders = []
  cones = []
  ii = 0
  for ii in range(len(xyz[0])): # loop over atoms
    pos = np.array([xyz[0][ii],xyz[1][ii],xyz[2][ii]]) + dr  # position
    axis = np.array([mag[0][ii],mag[1][ii],mag[2][ii]])  # position
    crad = 0.05*np.sqrt(axis.dot(axis)) # radius of the cone and cylinder
    cylinder = v.cylinder(pos=pos,axis=axis) # create arrow
    cone = v.cone(pos=pos+axis,axis=axis/4.0,radius = 2.0*crad ) # create arrow
    cylinder.color = v.color.red  # color of the arrow
    cone.color = v.color.red  # color of the arrow
    if atom_color: # if atoms have color change to green
      cylinder.color = v.color.green  # color of the arrow
      cone.color = v.color.green  # color of the arrow
    cylinder.radius = crad  # radius of the cone
    cylinders += [cylinder] # store arrow
    ii += 1
  return cylinders

###############################################
###############################################
###############################################

crys = crystal() # create a crystal class

# setup the display
scene2 = v.display(title='Magnetism',
     x=0, y=0, width=300, height=300,
     center=(0,0,0), background=(1,1,1))


ncells = 0 # number of cells

try:
  ncells = int(sys.argv[1]) # number of cells

except:
  ncells = 0 # number of cells

lattice=None # initialice lattice
try:
  if ncells>0:
    get_lattice(crys) # get lattice vectors  
except: pass


# plot the atoms
##############################################
das = [] # number of displacements
if crys.dimensionality == 0:
  create_lattice(xyz)    # plot the atoms
if crys.dimensionality == 1:  
  for i in range(-ncells,ncells+1):
    if i==0:
      create_lattice(xyz,dr=crys.a1*i,bold=True)    # plot the atoms
    else:
      create_lattice(xyz,dr=crys.a1*i)    # plot the atoms
    das.append([i,0,0])
if crys.dimensionality == 2:
  for i in range(-ncells,ncells+1):
    for j in range(-ncells,ncells+1):
      if i==0 and j==0:  # central cell
# plot the atoms
        create_lattice(xyz,dr=crys.a1*i + crys.a2*j,bold=True)    
      else:
        create_lattice(xyz,dr=crys.a1*i + crys.a2*j)    # plot the atoms
      das.append([i,j,0])
if crys.dimensionality == 3:
  for i in range(-ncells,ncells+1):
    for j in range(-ncells,ncells+1):
      if i==0 and j==0:  # central cell
# plot the atoms
        create_lattice(xyz,dr=crys.a1*i + crys.a2*j,bold=True)    
      else:
        create_lattice(xyz,dr=crys.a1*i + crys.a2*j)    # plot the atoms
      das.append([i,j,0])
##############################################
  


# Plot magnetization
##############################################
##############################################
#plot_magnetization_arrow(xyz,mag)   # plot the magnetization as arrows
try:
  if not "nomag" in sys.argv:
    (ind,mag) = get_magnetization() # get the orbital index and magnetizations
    plot_magnetization_cylinders(xyz,mag)   # plot the magnetization as cylinders
    for da in das: # and loop over replicas
      plot_magnetization_cylinders(xyz,mag,dr=crys.a1*da[0] + crys.a2*da[1]) 
except: pass
##############################################
##############################################





#v.display(background=v.color.white)


####################################################
####################################################
# get bonds of the system
if not "nobonds" in sys.argv:
  bd = {} # initialize dictionary
  bd[""] =  []
  bd["ons"] =  get_bonds("ONSITE_MATRIX")
  if crys.dimensionality > 0:
    bd["tmx"] = get_bonds("HOPPING_MATRIX_-1")
    bd["tx"] = get_bonds("HOPPING_MATRIX_1")
  if crys.dimensionality > 1:
    bd["tmy"] = get_bonds("HOPPING_MATRIX_0_-1")
    bd["ty"] = get_bonds("HOPPING_MATRIX_0_1")
    bd["txy"] = get_bonds("HOPPING_MATRIX_1_1")
    bd["txmy"] = get_bonds("HOPPING_MATRIX_1_-1")
####################################################
####################################################



def tlabel(dr,crys):
  """ Function to decide which label return """
  dr = np.array(dr)
  a1, a2 = crys.a1 ,crys.a2
  def is0(a):
    b = np.dot(a,a)
    if b < 0.00001: return True ; return False
  if is0(dr): return "ons"
  elif is0(dr-a1): return "tx"
  elif is0(dr+a1): return "tmx"
  elif is0(dr-a2): return "ty"
  elif is0(dr+a2): return "tmy"
  elif is0(dr-a1-a2): return "txy"
  elif is0(dr+a1-a2): return "txmy"
  else: return ""




############################
# Create bonds ############
############################
if not "nobonds" in sys.argv:
  create_bonds(xyz,bd["ons"])
  for da1 in das:
    for da2 in das:
      dr1 = crys.a1*da1[0] + crys.a2*da1[1] + crys.a3*da1[2]
      dr2 = crys.a1*da2[0] + crys.a2*da2[1] + crys.a3*da2[2]
      bonds = bd[tlabel(dr2-dr1,crys)]  # get the corresponding bonds 
      create_bonds(xyz,bonds,dr1=dr1,dr2=dr2)



